generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model permissions {
  permission_id   Int               @id @default(autoincrement())
  endpoint        String            @db.VarChar(255)
  method          String            @db.VarChar(255)
  module          String            @db.VarChar(255)
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  update_at       DateTime?         @default(now()) @db.Timestamp(0)
  role_permission role_permission[]
}

model role_permission {
  role_permission_id Int         @id @default(autoincrement())
  role_id            Int
  permission_id      Int
  is_active          Boolean?    @default(false)
  created_at         DateTime?   @default(now()) @db.Timestamp(0)
  update_at          DateTime?   @default(now()) @db.Timestamp(0)
  permissions        permissions @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_permission_id")
  roles              roles       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_id_2")

  @@index([permission_id], map: "fk_permission_id")
  @@index([role_id], map: "fk_role_id_2")
}

model roles {
  role_id         Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  is_active       Boolean?
  created_at      DateTime?         @default(now()) @db.Timestamp(0)
  update_at       DateTime?         @default(now()) @db.Timestamp(0)
  role_permission role_permission[]
  users           users[]
}

model users {
  user_id     Int       @id @default(autoincrement())
  email       String    @db.VarChar(255)
  password    String    @db.VarChar(255)
  userName    String    @db.VarChar(255)
  avatar      String?   @db.VarChar(255)
  google_id   String?   @db.VarChar(255)
  face_app_id String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)
  update_at   DateTime? @default(now()) @db.Timestamp(0)
  role_id     Int
  roles       roles     @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_id")

  @@index([role_id], map: "fk_role_id")
}
